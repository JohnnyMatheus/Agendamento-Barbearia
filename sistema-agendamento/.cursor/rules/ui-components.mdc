---
globs: *.tsx,*.ts
description: Padrões para componentes de UI do sistema de barbearia
---

# UI Components Guidelines

## Estrutura de Componentes

### Template Base

```tsx
import React from "react";
import { cn } from "@/lib/utils";

interface ComponentNameProps {
  className?: string;
  children?: React.ReactNode;
  // outras props específicas
}

export function ComponentName({
  className,
  children,
  ...props
}: ComponentNameProps) {
  return (
    <div className={cn("base-classes", className)} {...props}>
      {children}
    </div>
  );
}
```

## Componentes Específicos da Barbearia

### BarberCard

```tsx
interface BarberCardProps {
  name: string;
  specialty: string;
  rating: number;
  image: string;
  isAvailable: boolean;
}

export function BarberCard({
  name,
  specialty,
  rating,
  image,
  isAvailable,
}: BarberCardProps) {
  return (
    <div className="bg-card rounded-lg p-6 border border-border">
      <div className="relative">
        <Image
          src={image}
          alt={name}
          width={200}
          height={200}
          className="rounded-lg object-cover"
        />
        {!isAvailable && (
          <div className="absolute inset-0 bg-black/50 rounded-lg flex items-center justify-center">
            <span className="text-white font-semibold">Indisponível</span>
          </div>
        )}
      </div>
      <div className="mt-4">
        <h3 className="font-semibold text-lg">{name}</h3>
        <p className="text-muted-foreground text-sm">{specialty}</p>
        <div className="flex items-center gap-1 mt-2">
          <Star className="h-4 w-4 fill-yellow-500 text-yellow-500" />
          <span className="text-sm font-medium">{rating}</span>
        </div>
      </div>
    </div>
  );
}
```

### ServiceCard

```tsx
interface ServiceCardProps {
  name: string;
  description: string;
  price: number;
  duration: number;
  isPopular?: boolean;
}

export function ServiceCard({
  name,
  description,
  price,
  duration,
  isPopular,
}: ServiceCardProps) {
  return (
    <div
      className={cn(
        "bg-card rounded-lg p-6 border border-border hover:border-yellow-500 transition-colors cursor-pointer",
        isPopular && "border-yellow-500 bg-yellow-500/5"
      )}
    >
      {isPopular && (
        <div className="bg-yellow-500 text-black text-xs font-semibold px-2 py-1 rounded-full inline-block mb-3">
          Mais Popular
        </div>
      )}
      <h3 className="font-semibold text-lg mb-2">{name}</h3>
      <p className="text-muted-foreground text-sm mb-4">{description}</p>
      <div className="flex justify-between items-center">
        <span className="text-2xl font-bold text-yellow-500">R$ {price}</span>
        <span className="text-sm text-muted-foreground">{duration}min</span>
      </div>
    </div>
  );
}
```

### AppointmentCard

```tsx
interface AppointmentCardProps {
  id: string;
  barber: string;
  service: string;
  date: string;
  time: string;
  status: "confirmed" | "pending" | "cancelled";
  onCancel?: () => void;
  onReschedule?: () => void;
}

export function AppointmentCard({
  id,
  barber,
  service,
  date,
  time,
  status,
  onCancel,
  onReschedule,
}: AppointmentCardProps) {
  const statusColors = {
    confirmed: "bg-green-500",
    pending: "bg-yellow-500",
    cancelled: "bg-red-500",
  };

  const statusLabels = {
    confirmed: "Confirmado",
    pending: "Pendente",
    cancelled: "Cancelado",
  };

  return (
    <div className="bg-card rounded-lg p-6 border border-border">
      <div className="flex justify-between items-start mb-4">
        <div>
          <h3 className="font-semibold text-lg">{service}</h3>
          <p className="text-muted-foreground">com {barber}</p>
        </div>
        <div
          className={cn(
            "px-3 py-1 rounded-full text-xs font-semibold text-white",
            statusColors[status]
          )}
        >
          {statusLabels[status]}
        </div>
      </div>

      <div className="flex items-center gap-4 mb-4">
        <Calendar className="h-4 w-4 text-muted-foreground" />
        <span>{date}</span>
        <Clock className="h-4 w-4 text-muted-foreground" />
        <span>{time}</span>
      </div>

      {status === "confirmed" && (
        <div className="flex gap-2">
          <Button
            variant="outline"
            size="sm"
            onClick={onReschedule}
            className="flex-1"
          >
            Reagendar
          </Button>
          <Button
            variant="destructive"
            size="sm"
            onClick={onCancel}
            className="flex-1"
          >
            Cancelar
          </Button>
        </div>
      )}
    </div>
  );
}
```

## Padrões de Estilização

### Cores Consistentes

```tsx
// Cores principais
const colors = {
  primary: "text-yellow-500",
  primaryBg: "bg-yellow-500",
  primaryHover: "hover:bg-yellow-600",
  primaryBorder: "border-yellow-500",

  // Estados
  success: "text-green-500 bg-green-500",
  warning: "text-yellow-500 bg-yellow-500",
  error: "text-red-500 bg-red-500",

  // Neutras
  muted: "text-muted-foreground",
  card: "bg-card text-card-foreground",
  border: "border-border",
};
```

### Espaçamentos Padrão

```tsx
// Padding
const padding = {
  sm: "p-2",
  md: "p-4",
  lg: "p-6",
  xl: "p-8",
};

// Margin
const margin = {
  sm: "m-2",
  md: "m-4",
  lg: "m-6",
  xl: "m-8",
};

// Gap
const gap = {
  sm: "gap-2",
  md: "gap-4",
  lg: "gap-6",
  xl: "gap-8",
};
```

### Animações e Transições

```tsx
// Transições padrão
const transitions = {
  colors: "transition-colors duration-200",
  all: "transition-all duration-200",
  transform: "transition-transform duration-200",
};

// Hover effects
const hover = {
  scale: "hover:scale-105",
  shadow: "hover:shadow-lg",
  border: "hover:border-yellow-500",
};
```

## Responsividade

### Breakpoints para Componentes

```tsx
// Grid responsivo
const gridClasses = {
  mobile: "grid-cols-1",
  tablet: "sm:grid-cols-2",
  desktop: "lg:grid-cols-3",
  wide: "xl:grid-cols-4",
};

// Flex responsivo
const flexClasses = {
  mobile: "flex-col",
  tablet: "sm:flex-row",
  desktop: "lg:flex-row",
};
```

### Texto Responsivo

```tsx
const textSizes = {
  mobile: "text-sm",
  tablet: "sm:text-base",
  desktop: "lg:text-lg",
};
```

## Acessibilidade

### ARIA Labels

```tsx
// Botões com ícones
<Button aria-label="Favoritar barbeiro">
  <Heart className="h-4 w-4" />
</Button>

// Cards clicáveis
<div
  role="button"
  tabIndex={0}
  aria-label={`Agendar com ${barberName}`}
  onKeyDown={(e) => e.key === 'Enter' && handleClick()}
>
  {/* conteúdo do card */}
</div>
```

### Focus Management

```tsx
// Focus visible
const focusClasses = 'focus:outline-none focus:ring-2 focus:ring-yellow-500 focus:ring-offset-2'

// Skip links
<a
  href="#main-content"
  className="sr-only focus:not-sr-only focus:absolute focus:top-4 focus:left-4 bg-yellow-500 text-black px-4 py-2 rounded"
>
  Pular para conteúdo principal
</a>
```

## Estados de Loading

### Skeleton Loaders

```tsx
export function BarberCardSkeleton() {
  return (
    <div className="bg-card rounded-lg p-6 border border-border animate-pulse">
      <div className="bg-muted h-48 rounded-lg mb-4"></div>
      <div className="space-y-2">
        <div className="bg-muted h-4 rounded w-3/4"></div>
        <div className="bg-muted h-3 rounded w-1/2"></div>
        <div className="bg-muted h-3 rounded w-1/4"></div>
      </div>
    </div>
  );
}
```

### Loading States

```tsx
// Botão com loading
<Button disabled={isLoading}>
  {isLoading ? (
    <>
      <Loader2 className="h-4 w-4 animate-spin mr-2" />
      Carregando...
    </>
  ) : (
    "Agendar"
  )}
</Button>
```

## Formulários

### Input Components

```tsx
interface InputProps extends React.InputHTMLAttributes<HTMLInputElement> {
  label?: string;
  error?: string;
  helperText?: string;
}

export function Input({
  label,
  error,
  helperText,
  className,
  ...props
}: InputProps) {
  return (
    <div className="space-y-2">
      {label && (
        <label className="text-sm font-medium text-foreground">{label}</label>
      )}
      <input
        className={cn(
          "flex h-10 w-full rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background file:border-0 file:bg-transparent file:text-sm file:font-medium placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-yellow-500 focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50",
          error && "border-red-500 focus-visible:ring-red-500",
          className
        )}
        {...props}
      />
      {error && <p className="text-sm text-red-500">{error}</p>}
      {helperText && !error && (
        <p className="text-sm text-muted-foreground">{helperText}</p>
      )}
    </div>
  );
}
```

## Testes de Componentes

### Setup de Teste

```tsx
import { render, screen } from "@testing-library/react";
import { BarberCard } from "./barber-card";

describe("BarberCard", () => {
  const mockBarber = {
    name: "João Silva",
    specialty: "Corte Masculino",
    rating: 4.8,
    image: "/barber.jpg",
    isAvailable: true,
  };

  it("renders barber information correctly", () => {
    render(<BarberCard {...mockBarber} />);

    expect(screen.getByText("João Silva")).toBeInTheDocument();
    expect(screen.getByText("Corte Masculino")).toBeInTheDocument();
    expect(screen.getByText("4.8")).toBeInTheDocument();
  });

  it("shows unavailable state when barber is not available", () => {
    render(<BarberCard {...mockBarber} isAvailable={false} />);

    expect(screen.getByText("Indisponível")).toBeInTheDocument();
  });
});
```
